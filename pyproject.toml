[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "whisper_dictation"
version = "0.1.0"
description = "System-wide dictation with whisper"
readme = "README.md"
requires-python = ">=3.13"
license = { text = "MIT" }
authors = [
    { name = "Ammar Nanjiani", email = "ammar.nanjiani@gmail.com" },
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
]
dependencies = [
    # Add your project dependencies here
]

[project.scripts]
# Example: whisper_dictation = "whisper_dictation.__main__:main"

[project.optional-dependencies]
# Add optional dependency groups here
# Example:
# ml = ["torch>=2.0.0", "numpy>=1.24.0"]

[tool.uv]
dev-dependencies = [
    "mypy>=1.13.0",
    "pytest>=8.0.0",
    "pytest-cov>=5.0.0",
    "pytest-asyncio>=0.24.0",
    "pytest-mock>=3.14.0",
    "pytest-timeout>=2.3.0",
    "pytest-xdist>=3.6.0",
    "hypothesis>=6.0.0",
]

[tool.ruff]
line-length = 88
target-version = "py313"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "PTH", # flake8-use-pathlib
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",  # Line too long (handled by formatter)
    "B008",  # Do not perform function call in argument defaults
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["ARG001", "S101"]  # Allow unused arguments and asserts in tests

[tool.mypy]
python_version = "3.13"
strict = true
warn_return_any = true
warn_unused_configs = true
no_implicit_reexport = true

# Good for gradual typing
check_untyped_defs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true

# Helpful for finding bugs
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true

# Be strict about None
strict_optional = true

# Import discovery
namespace_packages = true
explicit_package_bases = true

# Per-module options for dependencies that lack types
[[tool.mypy.overrides]]
module = [
    # Add modules that lack type stubs here
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "8.0"
testpaths = ["tests"]
addopts = [
    "-ra",
    "--strict-markers",
    "--cov=whisper_dictation",
    "--cov-report=term-missing",
    "--cov-report=html",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["whisper_dictation"]
omit = ["*/tests/*", "*/__main__.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if __name__ == .__main__.:",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
]

[tool.hatch.build.targets.wheel]
packages = ["whisper_dictation"]
